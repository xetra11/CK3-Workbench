name: Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Test
        run: ./gradlew test --stacktrace
      - name: Build with Gradle
        run: ./gradlew build

  release:
    needs:
      - debian_release
      - macos_release
      - windows_release
    name: Release
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
    - name: Download Debian Artifact
      uses: actions/download-artifact@v2
      with:
        name: debian-distribution
        path: distributions
    - name: Download macOS Artifact
      uses: actions/download-artifact@v2
      with:
        name: macos-distribution
        path: distributions
    - name: Upload Debian Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: distributions/ck3-workbench_0.0.1-1_amd64.deb
        asset_name: ck3-workbench_0.0.1-1_amd64.deb
        asset_content_type: application/zip
    - name: Upload macOS Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: distributions/ck3-workbench-0.0.1.dmg
        asset_name: ck3-workbench-0.0.1.dmg
        asset_content_type: application/zip

  debian_release:
    needs: build
    name: Debian Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Create Debian Distribution
        run: ./gradlew packageDeb
      - name: Upload Debian Artifact
        uses: actions/upload-artifact@v2
        with:
          name: debian-distribution
          path: ./build/compose/binaries/main/deb/ck3-workbench_0.0.1-1_amd64.deb

  windows_release:
    needs: build
    name: Windows Release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Create Windows Distribution
        run: ./gradlew packageMsi --info

  macos_release:
    needs: build
    name: macOS Release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Create macOS Distribution
        run: ./gradlew packageDmg
      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos-distribution
          path: ./build/compose/binaries/main/dmg/ck3-workbench-0.0.1.dmg
